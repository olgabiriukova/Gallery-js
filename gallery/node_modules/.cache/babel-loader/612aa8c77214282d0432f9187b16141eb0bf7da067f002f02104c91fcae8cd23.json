{"ast":null,"code":"class ImageService {\n  constructor() {}\n\n  // Fetch image data by ID\n  async getImageById(id) {\n    const response = await fetch(`/api/images/${id}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json(); // <-- ошибка здесь если сервер возвращает HTML\n    return data;\n  }\n\n  // Update image with given fields\n  async updateImage(id, fields) {\n    const response = await fetch(`/api/images/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(fields)\n    });\n    if (!response.ok) throw new Error('Failed to update image');\n    return await response.json();\n  }\n\n  // Delete text comment by index\n  async deleteTextComment(id, idx) {\n    const image = await this.getImageById(id);\n    if (image.textComments && image.textComments.length > idx) {\n      image.textComments.splice(idx, 1);\n      return await this.updateImage(id, {\n        textComments: image.textComments\n      });\n    }\n    return image;\n  }\n\n  // Delete audio comment by index\n  async deleteAudioComment(id, idx) {\n    const image = await this.getImageById(id);\n    if (image.audioComments && image.audioComments.length > idx) {\n      image.audioComments.splice(idx, 1);\n      return await this.updateImage(id, {\n        audioComments: image.audioComments\n      });\n    }\n    return image;\n  }\n\n  // Delete drawing\n  async deleteDrawing(id) {\n    return await this.updateImage(id, {\n      drawing: null\n    });\n  }\n\n  // Delete entire image\n  async deleteImage(id) {\n    const response = await fetch(`/api/images/${id}`, {\n      method: 'DELETE'\n    });\n    if (!response.ok) throw new Error('Failed to delete image');\n  }\n}\nexport default ImageService;","map":{"version":3,"names":["ImageService","constructor","getImageById","id","response","fetch","ok","Error","status","data","json","updateImage","fields","method","headers","body","JSON","stringify","deleteTextComment","idx","image","textComments","length","splice","deleteAudioComment","audioComments","deleteDrawing","drawing","deleteImage"],"sources":["C:/Users/lelia/gallery/src/services/ImageService.js"],"sourcesContent":["class ImageService {\r\n  constructor() {}\r\n\r\n  // Fetch image data by ID\r\n  async getImageById(id) {\r\n    const response = await fetch(`/api/images/${id}`);\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    const data = await response.json();  // <-- ошибка здесь если сервер возвращает HTML\r\n    return data;\r\n  }\r\n\r\n  // Update image with given fields\r\n  async updateImage(id, fields) {\r\n    const response = await fetch(`/api/images/${id}`, {\r\n      method: 'PUT',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(fields),\r\n    });\r\n    if (!response.ok) throw new Error('Failed to update image');\r\n    return await response.json();\r\n  }\r\n\r\n  // Delete text comment by index\r\n  async deleteTextComment(id, idx) {\r\n    const image = await this.getImageById(id);\r\n    if (image.textComments && image.textComments.length > idx) {\r\n      image.textComments.splice(idx, 1);\r\n      return await this.updateImage(id, { textComments: image.textComments });\r\n    }\r\n    return image;\r\n  }\r\n\r\n  // Delete audio comment by index\r\n  async deleteAudioComment(id, idx) {\r\n    const image = await this.getImageById(id);\r\n    if (image.audioComments && image.audioComments.length > idx) {\r\n      image.audioComments.splice(idx, 1);\r\n      return await this.updateImage(id, { audioComments: image.audioComments });\r\n    }\r\n    return image;\r\n  }\r\n\r\n  // Delete drawing\r\n  async deleteDrawing(id) {\r\n    return await this.updateImage(id, { drawing: null });\r\n  }\r\n\r\n  // Delete entire image\r\n  async deleteImage(id) {\r\n    const response = await fetch(`/api/images/${id}`, {\r\n      method: 'DELETE',\r\n    });\r\n    if (!response.ok) throw new Error('Failed to delete image');\r\n  }\r\n}\r\n\r\nexport default ImageService;\r\n"],"mappings":"AAAA,MAAMA,YAAY,CAAC;EACjBC,WAAWA,CAAA,EAAG,CAAC;;EAEf;EACA,MAAMC,YAAYA,CAACC,EAAE,EAAE;IACrB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,eAAeF,EAAE,EAAE,CAAC;IACjD,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;IAC3D;IACA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC,CAAC,CAAE;IACrC,OAAOD,IAAI;EACb;;EAEA;EACA,MAAME,WAAWA,CAACR,EAAE,EAAES,MAAM,EAAE;IAC5B,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAC,eAAeF,EAAE,EAAE,EAAE;MAChDU,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,MAAM;IAC7B,CAAC,CAAC;IACF,IAAI,CAACR,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;IAC3D,OAAO,MAAMH,QAAQ,CAACM,IAAI,CAAC,CAAC;EAC9B;;EAEA;EACA,MAAMQ,iBAAiBA,CAACf,EAAE,EAAEgB,GAAG,EAAE;IAC/B,MAAMC,KAAK,GAAG,MAAM,IAAI,CAAClB,YAAY,CAACC,EAAE,CAAC;IACzC,IAAIiB,KAAK,CAACC,YAAY,IAAID,KAAK,CAACC,YAAY,CAACC,MAAM,GAAGH,GAAG,EAAE;MACzDC,KAAK,CAACC,YAAY,CAACE,MAAM,CAACJ,GAAG,EAAE,CAAC,CAAC;MACjC,OAAO,MAAM,IAAI,CAACR,WAAW,CAACR,EAAE,EAAE;QAAEkB,YAAY,EAAED,KAAK,CAACC;MAAa,CAAC,CAAC;IACzE;IACA,OAAOD,KAAK;EACd;;EAEA;EACA,MAAMI,kBAAkBA,CAACrB,EAAE,EAAEgB,GAAG,EAAE;IAChC,MAAMC,KAAK,GAAG,MAAM,IAAI,CAAClB,YAAY,CAACC,EAAE,CAAC;IACzC,IAAIiB,KAAK,CAACK,aAAa,IAAIL,KAAK,CAACK,aAAa,CAACH,MAAM,GAAGH,GAAG,EAAE;MAC3DC,KAAK,CAACK,aAAa,CAACF,MAAM,CAACJ,GAAG,EAAE,CAAC,CAAC;MAClC,OAAO,MAAM,IAAI,CAACR,WAAW,CAACR,EAAE,EAAE;QAAEsB,aAAa,EAAEL,KAAK,CAACK;MAAc,CAAC,CAAC;IAC3E;IACA,OAAOL,KAAK;EACd;;EAEA;EACA,MAAMM,aAAaA,CAACvB,EAAE,EAAE;IACtB,OAAO,MAAM,IAAI,CAACQ,WAAW,CAACR,EAAE,EAAE;MAAEwB,OAAO,EAAE;IAAK,CAAC,CAAC;EACtD;;EAEA;EACA,MAAMC,WAAWA,CAACzB,EAAE,EAAE;IACpB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,eAAeF,EAAE,EAAE,EAAE;MAChDU,MAAM,EAAE;IACV,CAAC,CAAC;IACF,IAAI,CAACT,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;EAC7D;AACF;AAEA,eAAeP,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
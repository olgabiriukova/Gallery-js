{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lelia\\\\gallery\\\\src\\\\pages\\\\ImageView.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { TextComment, AudioComment } from '../model/Comment';\nimport { getImageById, updateImage } from '../services/storage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ImageView() {\n  _s();\n  const {\n    id\n  } = useParams(); // Get image ID from URL params\n  const [image, setImage] = useState(null); // Image data state\n\n  useEffect(() => {\n    // Load image data and convert plain arrays to Comment class instances\n    (async () => {\n      const data = await getImageById(id);\n\n      // Convert plain text comments into TextComment instances\n      data.textComments = (data.textComments || []).map((text, idx) => new TextComment(text, idx));\n\n      // Convert plain audio URLs into AudioComment instances\n      data.audioComments = (data.audioComments || []).map((url, idx) => new AudioComment(url, idx));\n      setImage(data);\n    })();\n  }, [id]);\n\n  // Add a new TextComment\n  const handleAddTextComment = async text => {\n    const newComment = new TextComment(text);\n    // Add new comment to the existing array\n    const updatedTextComments = [...(image.textComments || []), newComment];\n\n    // Save plain text array to backend\n    await updateImage(id, {\n      textComments: updatedTextComments.map(c => c.text)\n    });\n\n    // Update state with Comment objects for further use in UI\n    setImage(prev => ({\n      ...prev,\n      textComments: updatedTextComments\n    }));\n  };\n\n  // Delete a TextComment by index\n  const handleDeleteTextComment = async index => {\n    // Filter out the comment to delete\n    const updatedTextComments = image.textComments.filter((_, i) => i !== index);\n\n    // Save updated plain array to backend\n    await updateImage(id, {\n      textComments: updatedTextComments.map(c => c.text)\n    });\n\n    // Update state\n    setImage(prev => ({\n      ...prev,\n      textComments: updatedTextComments\n    }));\n  };\n\n  // Add a new AudioComment\n  const handleAddAudioComment = async audioUrl => {\n    const newComment = new AudioComment(audioUrl);\n    const updatedAudioComments = [...(image.audioComments || []), newComment];\n\n    // Save plain URLs array to backend\n    await updateImage(id, {\n      audioComments: updatedAudioComments.map(c => c.audioUrl)\n    });\n\n    // Update state\n    setImage(prev => ({\n      ...prev,\n      audioComments: updatedAudioComments\n    }));\n  };\n\n  // Delete an AudioComment by index\n  const handleDeleteAudioComment = async index => {\n    const updatedAudioComments = image.audioComments.filter((_, i) => i !== index);\n    await updateImage(id, {\n      audioComments: updatedAudioComments.map(c => c.audioUrl)\n    });\n    setImage(prev => ({\n      ...prev,\n      audioComments: updatedAudioComments\n    }));\n  };\n  if (!image) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 22\n  }, this);\n  return /*#__PURE__*/_jsxDEV(ImageDetail, {\n    image: image,\n    onTextCommentSave: handleAddTextComment,\n    onDeleteTextComment: handleDeleteTextComment,\n    onAudioCommentSave: handleAddAudioComment,\n    onDeleteAudioComment: handleDeleteAudioComment\n    // other props...\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n_s(ImageView, \"qeoOP+m6gvbnBCYdbwKl9sMjK90=\", false, function () {\n  return [useParams];\n});\n_c = ImageView;\nexport default ImageView;\nvar _c;\n$RefreshReg$(_c, \"ImageView\");","map":{"version":3,"names":["React","useState","useEffect","useParams","TextComment","AudioComment","getImageById","updateImage","jsxDEV","_jsxDEV","ImageView","_s","id","image","setImage","data","textComments","map","text","idx","audioComments","url","handleAddTextComment","newComment","updatedTextComments","c","prev","handleDeleteTextComment","index","filter","_","i","handleAddAudioComment","audioUrl","updatedAudioComments","handleDeleteAudioComment","children","fileName","_jsxFileName","lineNumber","columnNumber","ImageDetail","onTextCommentSave","onDeleteTextComment","onAudioCommentSave","onDeleteAudioComment","_c","$RefreshReg$"],"sources":["C:/Users/lelia/gallery/src/pages/ImageView.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { TextComment, AudioComment } from '../model/Comment';\r\nimport {\r\n  getImageById,\r\n  updateImage,\r\n} from '../services/storage';\r\n\r\nfunction ImageView() {\r\n  const { id } = useParams();               // Get image ID from URL params\r\n  const [image, setImage] = useState(null); // Image data state\r\n\r\n  useEffect(() => {\r\n    // Load image data and convert plain arrays to Comment class instances\r\n    (async () => {\r\n      const data = await getImageById(id);\r\n\r\n      // Convert plain text comments into TextComment instances\r\n      data.textComments = (data.textComments || []).map(\r\n        (text, idx) => new TextComment(text, idx)\r\n      );\r\n\r\n      // Convert plain audio URLs into AudioComment instances\r\n      data.audioComments = (data.audioComments || []).map(\r\n        (url, idx) => new AudioComment(url, idx)\r\n      );\r\n\r\n      setImage(data);\r\n    })();\r\n  }, [id]);\r\n\r\n  // Add a new TextComment\r\n  const handleAddTextComment = async (text) => {\r\n    const newComment = new TextComment(text);\r\n    // Add new comment to the existing array\r\n    const updatedTextComments = [...(image.textComments || []), newComment];\r\n\r\n    // Save plain text array to backend\r\n    await updateImage(id, { textComments: updatedTextComments.map(c => c.text) });\r\n\r\n    // Update state with Comment objects for further use in UI\r\n    setImage(prev => ({ ...prev, textComments: updatedTextComments }));\r\n  };\r\n\r\n  // Delete a TextComment by index\r\n  const handleDeleteTextComment = async (index) => {\r\n    // Filter out the comment to delete\r\n    const updatedTextComments = image.textComments.filter((_, i) => i !== index);\r\n\r\n    // Save updated plain array to backend\r\n    await updateImage(id, { textComments: updatedTextComments.map(c => c.text) });\r\n\r\n    // Update state\r\n    setImage(prev => ({ ...prev, textComments: updatedTextComments }));\r\n  };\r\n\r\n  // Add a new AudioComment\r\n  const handleAddAudioComment = async (audioUrl) => {\r\n    const newComment = new AudioComment(audioUrl);\r\n    const updatedAudioComments = [...(image.audioComments || []), newComment];\r\n\r\n    // Save plain URLs array to backend\r\n    await updateImage(id, { audioComments: updatedAudioComments.map(c => c.audioUrl) });\r\n\r\n    // Update state\r\n    setImage(prev => ({ ...prev, audioComments: updatedAudioComments }));\r\n  };\r\n\r\n  // Delete an AudioComment by index\r\n  const handleDeleteAudioComment = async (index) => {\r\n    const updatedAudioComments = image.audioComments.filter((_, i) => i !== index);\r\n    await updateImage(id, { audioComments: updatedAudioComments.map(c => c.audioUrl) });\r\n    setImage(prev => ({ ...prev, audioComments: updatedAudioComments }));\r\n  };\r\n\r\n  if (!image) return <div>Loading...</div>;\r\n\r\n  return (\r\n    <ImageDetail\r\n      image={image}\r\n      onTextCommentSave={handleAddTextComment}\r\n      onDeleteTextComment={handleDeleteTextComment}\r\n      onAudioCommentSave={handleAddAudioComment}\r\n      onDeleteAudioComment={handleDeleteAudioComment}\r\n      // other props...\r\n    />\r\n  );\r\n}\r\n\r\nexport default ImageView;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
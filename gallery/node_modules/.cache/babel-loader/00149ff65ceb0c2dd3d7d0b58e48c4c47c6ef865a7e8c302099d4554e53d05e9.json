{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lelia\\\\gallery\\\\src\\\\components\\\\DrawingCanvas.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DrawingCanvas({\n  imageSrc,\n  onSave\n}) {\n  _s();\n  const backgroundCanvasRef = useRef(null);\n  const drawingCanvasRef = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [color, setColor] = useState('#000000');\n  const [brushSize, setBrushSize] = useState(5);\n  const [isEraser, setIsEraser] = useState(false);\n  useEffect(() => {\n    const bgCanvas = backgroundCanvasRef.current;\n    const drawCanvas = drawingCanvasRef.current;\n    const ctx = bgCanvas.getContext('2d');\n    const img = new Image();\n    img.onload = () => {\n      // Фиксированные размеры для канвасов\n      const canvasWidth = 400;\n      const canvasHeight = 300;\n\n      // Устанавливаем размеры канвасов в пикселях\n      bgCanvas.width = canvasWidth;\n      bgCanvas.height = canvasHeight;\n      drawCanvas.width = canvasWidth;\n      drawCanvas.height = canvasHeight;\n\n      // Масштабируем изображение с сохранением пропорций\n      const ratio = Math.min(canvasWidth / img.width, canvasHeight / img.height);\n      const width = img.width * ratio;\n      const height = img.height * ratio;\n      const x = (canvasWidth - width) / 2;\n      const y = (canvasHeight - height) / 2;\n\n      // Чистим фон и рисуем изображение\n      ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n      ctx.drawImage(img, x, y, width, height);\n    };\n    img.src = imageSrc;\n  }, [imageSrc]);\n  const getMousePos = e => {\n    const rect = drawingCanvasRef.current.getBoundingClientRect();\n    return {\n      x: e.clientX - rect.left,\n      y: e.clientY - rect.top\n    };\n  };\n  const startDrawing = e => {\n    const ctx = drawingCanvasRef.current.getContext('2d');\n    const {\n      x,\n      y\n    } = getMousePos(e);\n    ctx.beginPath();\n    ctx.moveTo(x, y);\n    ctx.lineWidth = brushSize;\n    ctx.lineCap = 'round';\n    ctx.lineJoin = 'round';\n    ctx.globalCompositeOperation = isEraser ? 'destination-out' : 'source-over';\n    ctx.strokeStyle = color;\n    setIsDrawing(true);\n  };\n  const draw = e => {\n    if (!isDrawing) return;\n    const ctx = drawingCanvasRef.current.getContext('2d');\n    const {\n      x,\n      y\n    } = getMousePos(e);\n    ctx.lineTo(x, y);\n    ctx.stroke();\n  };\n  const stopDrawing = () => {\n    setIsDrawing(false);\n  };\n  const handleSave = () => {\n    const bgCanvas = backgroundCanvasRef.current;\n    const drawingCanvas = drawingCanvasRef.current;\n\n    // Создаём временный canvas\n    const finalCanvas = document.createElement('canvas');\n    finalCanvas.width = bgCanvas.width;\n    finalCanvas.height = bgCanvas.height;\n    const ctx = finalCanvas.getContext('2d');\n    ctx.drawImage(bgCanvas, 0, 0);\n    ctx.drawImage(drawingCanvas, 0, 0);\n    const dataUrl = finalCanvas.toDataURL('image/png');\n    onSave(dataUrl);\n  };\n  const resetDrawing = () => {\n    const ctx = drawingCanvasRef.current.getContext('2d');\n    ctx.clearRect(0, 0, drawingCanvasRef.current.width, drawingCanvasRef.current.height);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"drawing-canvas\",\n    style: {\n      position: 'relative',\n      display: 'inline-block'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: backgroundCanvasRef,\n      style: {\n        position: 'absolute',\n        left: 0,\n        top: 0,\n        zIndex: 0\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: drawingCanvasRef,\n      style: {\n        position: 'absolute',\n        left: 0,\n        top: 0,\n        zIndex: 1,\n        cursor: isEraser ? 'cell' : 'crosshair'\n      },\n      onMouseDown: startDrawing,\n      onMouseMove: draw,\n      onMouseUp: stopDrawing,\n      onMouseLeave: stopDrawing\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"drawing-controls\",\n      style: {\n        marginTop: 'calc(100% + 10px)'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Color:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"color\",\n          value: color,\n          onChange: e => setColor(e.target.value),\n          disabled: isEraser\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Brush Size:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          min: \"1\",\n          max: \"50\",\n          value: brushSize,\n          onChange: e => setBrushSize(+e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: isEraser,\n          onChange: () => setIsEraser(!isEraser)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this), \"Eraser\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetDrawing,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSave,\n        children: \"Save Drawing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n}\n_s(DrawingCanvas, \"45TOyPsnPtrYHgG5YLc+As4iESg=\");\n_c = DrawingCanvas;\nexport default DrawingCanvas;\nvar _c;\n$RefreshReg$(_c, \"DrawingCanvas\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","DrawingCanvas","imageSrc","onSave","_s","backgroundCanvasRef","drawingCanvasRef","isDrawing","setIsDrawing","color","setColor","brushSize","setBrushSize","isEraser","setIsEraser","bgCanvas","current","drawCanvas","ctx","getContext","img","Image","onload","canvasWidth","canvasHeight","width","height","ratio","Math","min","x","y","clearRect","drawImage","src","getMousePos","e","rect","getBoundingClientRect","clientX","left","clientY","top","startDrawing","beginPath","moveTo","lineWidth","lineCap","lineJoin","globalCompositeOperation","strokeStyle","draw","lineTo","stroke","stopDrawing","handleSave","drawingCanvas","finalCanvas","document","createElement","dataUrl","toDataURL","resetDrawing","className","style","position","display","children","ref","zIndex","fileName","_jsxFileName","lineNumber","columnNumber","cursor","onMouseDown","onMouseMove","onMouseUp","onMouseLeave","marginTop","type","value","onChange","target","disabled","max","checked","onClick","_c","$RefreshReg$"],"sources":["C:/Users/lelia/gallery/src/components/DrawingCanvas.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\n\r\nfunction DrawingCanvas({ imageSrc, onSave }) {\r\n  const backgroundCanvasRef = useRef(null);\r\n  const drawingCanvasRef = useRef(null);\r\n\r\n  const [isDrawing, setIsDrawing] = useState(false);\r\n  const [color, setColor] = useState('#000000');\r\n  const [brushSize, setBrushSize] = useState(5);\r\n  const [isEraser, setIsEraser] = useState(false);\r\n\r\n \r\n\r\n\r\n  useEffect(() => {\r\n  const bgCanvas = backgroundCanvasRef.current;\r\n  const drawCanvas = drawingCanvasRef.current;\r\n  const ctx = bgCanvas.getContext('2d');\r\n  const img = new Image();\r\n\r\n  img.onload = () => {\r\n    // Фиксированные размеры для канвасов\r\n    const canvasWidth = 400;\r\n    const canvasHeight = 300;\r\n\r\n    // Устанавливаем размеры канвасов в пикселях\r\n    bgCanvas.width = canvasWidth;\r\n    bgCanvas.height = canvasHeight;\r\n    drawCanvas.width = canvasWidth;\r\n    drawCanvas.height = canvasHeight;\r\n\r\n    // Масштабируем изображение с сохранением пропорций\r\n    const ratio = Math.min(canvasWidth / img.width, canvasHeight / img.height);\r\n    const width = img.width * ratio;\r\n    const height = img.height * ratio;\r\n    const x = (canvasWidth - width) / 2;\r\n    const y = (canvasHeight - height) / 2;\r\n\r\n    // Чистим фон и рисуем изображение\r\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\r\n    ctx.drawImage(img, x, y, width, height);\r\n  };\r\n\r\n  img.src = imageSrc;\r\n}, [imageSrc]);\r\n\r\n  const getMousePos = (e) => {\r\n    const rect = drawingCanvasRef.current.getBoundingClientRect();\r\n    return {\r\n      x: e.clientX - rect.left,\r\n      y: e.clientY - rect.top,\r\n    };\r\n  };\r\n\r\n  const startDrawing = (e) => {\r\n    const ctx = drawingCanvasRef.current.getContext('2d');\r\n    const { x, y } = getMousePos(e);\r\n\r\n    ctx.beginPath();\r\n    ctx.moveTo(x, y);\r\n    ctx.lineWidth = brushSize;\r\n    ctx.lineCap = 'round';\r\n    ctx.lineJoin = 'round';\r\n\r\n    ctx.globalCompositeOperation = isEraser ? 'destination-out' : 'source-over';\r\n    ctx.strokeStyle = color;\r\n\r\n    setIsDrawing(true);\r\n  };\r\n\r\n  const draw = (e) => {\r\n    if (!isDrawing) return;\r\n\r\n    const ctx = drawingCanvasRef.current.getContext('2d');\r\n    const { x, y } = getMousePos(e);\r\n\r\n    ctx.lineTo(x, y);\r\n    ctx.stroke();\r\n  };\r\n\r\n  const stopDrawing = () => {\r\n    setIsDrawing(false);\r\n  };\r\n\r\n  const handleSave = () => {\r\n    const bgCanvas = backgroundCanvasRef.current;\r\n    const drawingCanvas = drawingCanvasRef.current;\r\n\r\n    // Создаём временный canvas\r\n    const finalCanvas = document.createElement('canvas');\r\n    finalCanvas.width = bgCanvas.width;\r\n    finalCanvas.height = bgCanvas.height;\r\n\r\n    const ctx = finalCanvas.getContext('2d');\r\n    ctx.drawImage(bgCanvas, 0, 0);\r\n    ctx.drawImage(drawingCanvas, 0, 0);\r\n\r\n    const dataUrl = finalCanvas.toDataURL('image/png');\r\n    onSave(dataUrl);\r\n  };\r\n\r\n  const resetDrawing = () => {\r\n    const ctx = drawingCanvasRef.current.getContext('2d');\r\n    ctx.clearRect(0, 0, drawingCanvasRef.current.width, drawingCanvasRef.current.height);\r\n  };\r\n\r\n  return (\r\n    <div className=\"drawing-canvas\" style={{ position: 'relative', display: 'inline-block' }}>\r\n      <canvas ref={backgroundCanvasRef} style={{ position: 'absolute', left: 0, top: 0, zIndex: 0 }} />\r\n      <canvas\r\n        ref={drawingCanvasRef}\r\n        style={{ position: 'absolute', left: 0, top: 0, zIndex: 1, cursor: isEraser ? 'cell' : 'crosshair' }}\r\n        onMouseDown={startDrawing}\r\n        onMouseMove={draw}\r\n        onMouseUp={stopDrawing}\r\n        onMouseLeave={stopDrawing}\r\n      />\r\n      <div className=\"drawing-controls\" style={{ marginTop: 'calc(100% + 10px)' }}>\r\n        <label>\r\n          Color:\r\n          <input type=\"color\" value={color} onChange={(e) => setColor(e.target.value)} disabled={isEraser} />\r\n        </label>\r\n        <label>\r\n          Brush Size:\r\n          <input type=\"range\" min=\"1\" max=\"50\" value={brushSize} onChange={(e) => setBrushSize(+e.target.value)} />\r\n        </label>\r\n        <label>\r\n          <input type=\"checkbox\" checked={isEraser} onChange={() => setIsEraser(!isEraser)} />\r\n          Eraser\r\n        </label>\r\n        <button onClick={resetDrawing}>Reset</button>\r\n        <button onClick={handleSave}>Save Drawing</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DrawingCanvas;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
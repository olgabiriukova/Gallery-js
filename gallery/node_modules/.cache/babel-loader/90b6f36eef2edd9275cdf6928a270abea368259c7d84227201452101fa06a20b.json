{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lelia\\\\gallery\\\\src\\\\components\\\\DrawingCanvas.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DrawingCanvas({\n  imageSrc,\n  onSave\n}) {\n  _s();\n  const backgroundCanvasRef = useRef(null);\n  const drawingCanvasRef = useRef(null);\n  const containerRef = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [color, setColor] = useState('#000000');\n  const [brushSize, setBrushSize] = useState(5);\n  const [isEraser, setIsEraser] = useState(false);\n  const [scale, setScale] = useState(1);\n  const [offset, setOffset] = useState({\n    x: 0,\n    y: 0\n  });\n  useEffect(() => {\n    const bgCanvas = backgroundCanvasRef.current;\n    const drawCanvas = drawingCanvasRef.current;\n    const container = containerRef.current;\n    const ctx = bgCanvas.getContext('2d');\n    const img = new Image();\n    img.onload = () => {\n      // Get container dimensions\n      const containerWidth = container.offsetWidth;\n      const containerHeight = Math.floor(containerWidth * 0.75); // Aspect ratio 4:3\n\n      // Set canvas sizes\n      bgCanvas.width = containerWidth;\n      bgCanvas.height = containerHeight;\n      drawCanvas.width = containerWidth;\n      drawCanvas.height = containerHeight;\n\n      // Calculate scale preserving proportions\n      const scaleRatio = Math.min(containerWidth / img.width, containerHeight / img.height);\n      setScale(scaleRatio);\n\n      // Calculate offsets for centering\n      const offsetX = (containerWidth - img.width * scaleRatio) / 2;\n      const offsetY = (containerHeight - img.height * scaleRatio) / 2;\n      setOffset({\n        x: offsetX,\n        y: offsetY\n      });\n\n      // Clear and draw the image\n      ctx.clearRect(0, 0, containerWidth, containerHeight);\n      ctx.drawImage(img, 0, 0, img.width, img.height, offsetX, offsetY, img.width * scaleRatio, img.height * scaleRatio);\n    };\n    img.src = imageSrc;\n  }, [imageSrc]);\n  const getCanvasPosition = (clientX, clientY) => {\n    const canvas = drawingCanvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n\n    // Calculate actual canvas size\n    const scaleX = canvas.width / rect.width;\n    const scaleY = canvas.height / rect.height;\n\n    // Scale coordinates considering offsets and image scale\n    const x = (clientX - rect.left - offset.x * scaleX) / (scale * scaleX);\n    const y = (clientY - rect.top - offset.y * scaleY) / (scale * scaleY);\n    return {\n      x,\n      y\n    };\n  };\n  const startDrawing = e => {\n    const canvas = drawingCanvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const {\n      x,\n      y\n    } = getCanvasPosition(e.clientX || e.touches[0].clientX, e.clientY || e.touches[0].clientY);\n    ctx.beginPath();\n    ctx.moveTo(x, y);\n    ctx.lineWidth = brushSize;\n    ctx.lineCap = 'round';\n    ctx.lineJoin = 'round';\n    ctx.globalCompositeOperation = isEraser ? 'destination-out' : 'source-over';\n    ctx.strokeStyle = isEraser ? 'rgba(0,0,0,1)' : color;\n    setIsDrawing(true);\n  };\n  const draw = e => {\n    if (!isDrawing) return;\n    const canvas = drawingCanvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const {\n      x,\n      y\n    } = getCanvasPosition(e.clientX || e.touches[0].clientX, e.clientY || e.touches[0].clientY);\n    ctx.lineTo(x, y);\n    ctx.stroke();\n  };\n  const stopDrawing = () => {\n    setIsDrawing(false);\n    const ctx = drawingCanvasRef.current.getContext('2d');\n    ctx.beginPath();\n  };\n  const handleSave = () => {\n    const bgCanvas = backgroundCanvasRef.current;\n    const drawingCanvas = drawingCanvasRef.current;\n    const finalCanvas = document.createElement('canvas');\n\n    // Use original image size\n    const img = new Image();\n    img.onload = () => {\n      finalCanvas.width = img.width;\n      finalCanvas.height = img.height;\n      const ctx = finalCanvas.getContext('2d');\n\n      // Draw background image\n      ctx.drawImage(img, 0, 0, img.width, img.height);\n\n      // Draw the drawing with correct scaling\n      ctx.drawImage(drawingCanvas, offset.x, offset.y, img.width * scale, img.height * scale, 0, 0, img.width, img.height);\n      const dataUrl = finalCanvas.toDataURL('image/png');\n      onSave(dataUrl);\n    };\n    img.src = imageSrc;\n  };\n  const resetDrawing = () => {\n    const ctx = drawingCanvasRef.current.getContext('2d');\n    ctx.clearRect(0, 0, drawingCanvasRef.current.width, drawingCanvasRef.current.height);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"drawing-canvas\",\n    ref: containerRef,\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: backgroundCanvasRef,\n      style: {\n        position: 'absolute',\n        top: 0,\n        left: 0\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: drawingCanvasRef,\n      style: {\n        position: 'absolute',\n        top: 0,\n        left: 0\n      },\n      onMouseDown: startDrawing,\n      onMouseMove: draw,\n      onMouseUp: stopDrawing,\n      onMouseLeave: stopDrawing,\n      onTouchStart: startDrawing,\n      onTouchMove: draw,\n      onTouchEnd: stopDrawing\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"drawing-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Color:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"color\",\n          value: color,\n          onChange: e => setColor(e.target.value),\n          disabled: isEraser\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Brush size:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          min: \"1\",\n          max: \"50\",\n          value: brushSize,\n          onChange: e => setBrushSize(+e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: isEraser,\n          onChange: () => setIsEraser(!isEraser)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this), \"Eraser\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetDrawing,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSave,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, this);\n}\n_s(DrawingCanvas, \"kgAFuMJN9kHncr/p/BjEAu8zxlQ=\");\n_c = DrawingCanvas;\nexport default DrawingCanvas;\nvar _c;\n$RefreshReg$(_c, \"DrawingCanvas\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","DrawingCanvas","imageSrc","onSave","_s","backgroundCanvasRef","drawingCanvasRef","containerRef","isDrawing","setIsDrawing","color","setColor","brushSize","setBrushSize","isEraser","setIsEraser","scale","setScale","offset","setOffset","x","y","bgCanvas","current","drawCanvas","container","ctx","getContext","img","Image","onload","containerWidth","offsetWidth","containerHeight","Math","floor","width","height","scaleRatio","min","offsetX","offsetY","clearRect","drawImage","src","getCanvasPosition","clientX","clientY","canvas","rect","getBoundingClientRect","scaleX","scaleY","left","top","startDrawing","e","touches","beginPath","moveTo","lineWidth","lineCap","lineJoin","globalCompositeOperation","strokeStyle","draw","lineTo","stroke","stopDrawing","handleSave","drawingCanvas","finalCanvas","document","createElement","dataUrl","toDataURL","resetDrawing","className","ref","children","style","position","fileName","_jsxFileName","lineNumber","columnNumber","onMouseDown","onMouseMove","onMouseUp","onMouseLeave","onTouchStart","onTouchMove","onTouchEnd","type","value","onChange","target","disabled","max","checked","onClick","_c","$RefreshReg$"],"sources":["C:/Users/lelia/gallery/src/components/DrawingCanvas.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\n\r\nfunction DrawingCanvas({ imageSrc, onSave }) {\r\n  const backgroundCanvasRef = useRef(null);\r\n  const drawingCanvasRef = useRef(null);\r\n  const containerRef = useRef(null);\r\n\r\n  const [isDrawing, setIsDrawing] = useState(false);\r\n  const [color, setColor] = useState('#000000');\r\n  const [brushSize, setBrushSize] = useState(5);\r\n  const [isEraser, setIsEraser] = useState(false);\r\n  const [scale, setScale] = useState(1);\r\n  const [offset, setOffset] = useState({ x: 0, y: 0 });\r\n\r\n  useEffect(() => {\r\n    const bgCanvas = backgroundCanvasRef.current;\r\n    const drawCanvas = drawingCanvasRef.current;\r\n    const container = containerRef.current;\r\n    const ctx = bgCanvas.getContext('2d');\r\n    const img = new Image();\r\n\r\n    img.onload = () => {\r\n      // Get container dimensions\r\n      const containerWidth = container.offsetWidth;\r\n      const containerHeight = Math.floor(containerWidth * 0.75); // Aspect ratio 4:3\r\n\r\n      // Set canvas sizes\r\n      bgCanvas.width = containerWidth;\r\n      bgCanvas.height = containerHeight;\r\n      drawCanvas.width = containerWidth;\r\n      drawCanvas.height = containerHeight;\r\n\r\n      // Calculate scale preserving proportions\r\n      const scaleRatio = Math.min(\r\n        containerWidth / img.width,\r\n        containerHeight / img.height\r\n      );\r\n      setScale(scaleRatio);\r\n\r\n      // Calculate offsets for centering\r\n      const offsetX = (containerWidth - img.width * scaleRatio) / 2;\r\n      const offsetY = (containerHeight - img.height * scaleRatio) / 2;\r\n      setOffset({ x: offsetX, y: offsetY });\r\n\r\n      // Clear and draw the image\r\n      ctx.clearRect(0, 0, containerWidth, containerHeight);\r\n      ctx.drawImage(\r\n        img,\r\n        0,\r\n        0,\r\n        img.width,\r\n        img.height,\r\n        offsetX,\r\n        offsetY,\r\n        img.width * scaleRatio,\r\n        img.height * scaleRatio\r\n      );\r\n    };\r\n\r\n    img.src = imageSrc;\r\n  }, [imageSrc]);\r\n\r\n  const getCanvasPosition = (clientX, clientY) => {\r\n    const canvas = drawingCanvasRef.current;\r\n    const rect = canvas.getBoundingClientRect();\r\n\r\n    // Calculate actual canvas size\r\n    const scaleX = canvas.width / rect.width;\r\n    const scaleY = canvas.height / rect.height;\r\n\r\n    // Scale coordinates considering offsets and image scale\r\n    const x = (clientX - rect.left - offset.x * scaleX) / (scale * scaleX);\r\n    const y = (clientY - rect.top - offset.y * scaleY) / (scale * scaleY);\r\n\r\n    return { x, y };\r\n  };\r\n\r\n  const startDrawing = (e) => {\r\n    const canvas = drawingCanvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n    const { x, y } = getCanvasPosition(\r\n      e.clientX || e.touches[0].clientX,\r\n      e.clientY || e.touches[0].clientY\r\n    );\r\n\r\n    ctx.beginPath();\r\n    ctx.moveTo(x, y);\r\n    ctx.lineWidth = brushSize;\r\n    ctx.lineCap = 'round';\r\n    ctx.lineJoin = 'round';\r\n    ctx.globalCompositeOperation = isEraser ? 'destination-out' : 'source-over';\r\n    ctx.strokeStyle = isEraser ? 'rgba(0,0,0,1)' : color;\r\n\r\n    setIsDrawing(true);\r\n  };\r\n\r\n  const draw = (e) => {\r\n    if (!isDrawing) return;\r\n\r\n    const canvas = drawingCanvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n    const { x, y } = getCanvasPosition(\r\n      e.clientX || e.touches[0].clientX,\r\n      e.clientY || e.touches[0].clientY\r\n    );\r\n\r\n    ctx.lineTo(x, y);\r\n    ctx.stroke();\r\n  };\r\n\r\n  const stopDrawing = () => {\r\n    setIsDrawing(false);\r\n    const ctx = drawingCanvasRef.current.getContext('2d');\r\n    ctx.beginPath();\r\n  };\r\n\r\n  const handleSave = () => {\r\n    const bgCanvas = backgroundCanvasRef.current;\r\n    const drawingCanvas = drawingCanvasRef.current;\r\n    const finalCanvas = document.createElement('canvas');\r\n    \r\n    // Use original image size\r\n    const img = new Image();\r\n    img.onload = () => {\r\n      finalCanvas.width = img.width;\r\n      finalCanvas.height = img.height;\r\n      \r\n      const ctx = finalCanvas.getContext('2d');\r\n      \r\n      // Draw background image\r\n      ctx.drawImage(img, 0, 0, img.width, img.height);\r\n      \r\n      // Draw the drawing with correct scaling\r\n      ctx.drawImage(\r\n        drawingCanvas,\r\n        offset.x, offset.y,\r\n        img.width * scale, img.height * scale,\r\n        0, 0,\r\n        img.width, img.height\r\n      );\r\n      \r\n      const dataUrl = finalCanvas.toDataURL('image/png');\r\n      onSave(dataUrl);\r\n    };\r\n    img.src = imageSrc;\r\n  };\r\n\r\n  const resetDrawing = () => {\r\n    const ctx = drawingCanvasRef.current.getContext('2d');\r\n    ctx.clearRect(0, 0, drawingCanvasRef.current.width, drawingCanvasRef.current.height);\r\n  };\r\n\r\n  return (\r\n    <div className=\"drawing-canvas\" ref={containerRef}>\r\n      <canvas\r\n        ref={backgroundCanvasRef}\r\n        style={{ position: 'absolute', top: 0, left: 0 }}\r\n      />\r\n      <canvas\r\n        ref={drawingCanvasRef}\r\n        style={{ position: 'absolute', top: 0, left: 0 }}\r\n        onMouseDown={startDrawing}\r\n        onMouseMove={draw}\r\n        onMouseUp={stopDrawing}\r\n        onMouseLeave={stopDrawing}\r\n        onTouchStart={startDrawing}\r\n        onTouchMove={draw}\r\n        onTouchEnd={stopDrawing}\r\n      />\r\n      <div className=\"drawing-controls\">\r\n        <label>\r\n          Color:\r\n          <input\r\n            type=\"color\"\r\n            value={color}\r\n            onChange={(e) => setColor(e.target.value)}\r\n            disabled={isEraser}\r\n          />\r\n        </label>\r\n        <label>\r\n          Brush size:\r\n          <input\r\n            type=\"range\"\r\n            min=\"1\"\r\n            max=\"50\"\r\n            value={brushSize}\r\n            onChange={(e) => setBrushSize(+e.target.value)}\r\n          />\r\n        </label>\r\n        <label>\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={isEraser}\r\n            onChange={() => setIsEraser(!isEraser)}\r\n          />\r\n          Eraser\r\n        </label>\r\n        <button onClick={resetDrawing}>Reset</button>\r\n        <button onClick={handleSave}>Save</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DrawingCanvas;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
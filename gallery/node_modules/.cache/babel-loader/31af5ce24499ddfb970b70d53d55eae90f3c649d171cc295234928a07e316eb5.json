{"ast":null,"code":"import { saveToIndexedDB, getFromIndexedDB, deleteFromIndexedDB } from '../utils/db';\nclass ImageStorage {\n  constructor() {\n    this.STORAGE_KEY = 'image_gallery_meta';\n    this.MAX_IMAGES = 20;\n    this.initialize();\n  }\n  initialize() {\n    if (!localStorage.getItem(this.STORAGE_KEY)) {\n      localStorage.setItem(this.STORAGE_KEY, JSON.stringify([]));\n    }\n  }\n  async getImages() {\n    return JSON.parse(localStorage.getItem(this.STORAGE_KEY)) || [];\n  }\n  async getImageById(id) {\n    const meta = await this.getImages();\n    const entry = meta.find(img => img.id === id);\n    const data = await getFromIndexedDB(id);\n    return {\n      ...entry,\n      ...data\n    };\n  }\n  async saveImage(imageData) {\n    const id = Date.now().toString();\n    const {\n      image,\n      drawing,\n      audioComments,\n      textComments = [],\n      ...metaData\n    } = imageData;\n    const newMeta = {\n      id,\n      createdAt: Date.now(),\n      textCommentsCount: textComments.length,\n      hasDrawing: !!drawing,\n      hasAudio: !!(audioComments !== null && audioComments !== void 0 && audioComments.length),\n      ...metaData\n    };\n    const metaList = await this.getImages();\n    const updatedMeta = [newMeta, ...metaList].slice(0, this.MAX_IMAGES);\n    localStorage.setItem(this.STORAGE_KEY, JSON.stringify(updatedMeta));\n    await saveToIndexedDB({\n      id,\n      image,\n      drawing,\n      audioComments,\n      textComments\n    });\n    return {\n      id,\n      ...imageData\n    };\n  }\n  async updateImage(id, updates) {\n    const metaList = await this.getImages();\n    const idx = metaList.findIndex(img => img.id === id);\n    if (idx === -1) return null;\n    const dbData = await getFromIndexedDB(id);\n    const updatedMeta = {\n      ...metaList[idx],\n      ...updates\n    };\n    const updatedMetaList = [...metaList];\n    updatedMetaList[idx] = updatedMeta;\n    localStorage.setItem(this.STORAGE_KEY, JSON.stringify(updatedMetaList));\n    await saveToIndexedDB({\n      ...dbData,\n      ...updates,\n      id\n    });\n    return {\n      id,\n      ...dbData,\n      ...updates\n    };\n  }\n  async deleteImage(id) {\n    const metaList = await this.getImages();\n    const updatedMetaList = metaList.filter(img => img.id !== id);\n    localStorage.setItem(this.STORAGE_KEY, JSON.stringify(updatedMetaList));\n    await deleteFromIndexedDB(id);\n  }\n  async deleteTextComment(id, index) {\n    const data = await getFromIndexedDB(id);\n    if (!(data !== null && data !== void 0 && data.textComments)) return null;\n    data.textComments.splice(index, 1);\n    await saveToIndexedDB({\n      ...data,\n      id\n    });\n    return this.updateImage(id, {\n      textCommentsCount: data.textComments.length\n    });\n  }\n  async deleteAudioComment(id, index) {\n    const data = await getFromIndexedDB(id);\n    if (!(data !== null && data !== void 0 && data.audioComments)) return null;\n    data.audioComments.splice(index, 1);\n    await saveToIndexedDB({\n      ...data,\n      id\n    });\n    return this.updateImage(id, {\n      hasAudio: data.audioComments.length > 0\n    });\n  }\n  async deleteDrawing(id) {\n    const data = await getFromIndexedDB(id);\n    data.drawing = null;\n    await saveToIndexedDB({\n      ...data,\n      id\n    });\n    return this.updateImage(id, {\n      hasDrawing: false\n    });\n  }\n}\nexport const storage = new ImageStorage();\n\n// Helper functions\nexport const getImages = () => storage.getImages();\nexport const getImageById = id => storage.getImageById(id);\nexport const saveImage = imageData => storage.saveImage(imageData);\nexport const updateImage = (id, updates) => storage.updateImage(id, updates);\nexport const deleteImage = id => storage.deleteImage(id);\nexport const deleteTextComment = (id, idx) => storage.deleteTextComment(id, idx);\nexport const deleteAudioComment = (id, idx) => storage.deleteAudioComment(id, idx);\nexport const deleteDrawing = id => storage.deleteDrawing(id);","map":{"version":3,"names":["saveToIndexedDB","getFromIndexedDB","deleteFromIndexedDB","ImageStorage","constructor","STORAGE_KEY","MAX_IMAGES","initialize","localStorage","getItem","setItem","JSON","stringify","getImages","parse","getImageById","id","meta","entry","find","img","data","saveImage","imageData","Date","now","toString","image","drawing","audioComments","textComments","metaData","newMeta","createdAt","textCommentsCount","length","hasDrawing","hasAudio","metaList","updatedMeta","slice","updateImage","updates","idx","findIndex","dbData","updatedMetaList","deleteImage","filter","deleteTextComment","index","splice","deleteAudioComment","deleteDrawing","storage"],"sources":["C:/Users/lelia/gallery/src/services/storage.js"],"sourcesContent":["import {\r\n  saveToIndexedDB,\r\n  getFromIndexedDB,\r\n  deleteFromIndexedDB\r\n} from '../utils/db';\r\n\r\nclass ImageStorage {\r\n  constructor() {\r\n    this.STORAGE_KEY = 'image_gallery_meta';\r\n    this.MAX_IMAGES = 20;\r\n    this.initialize();\r\n  }\r\n\r\n  initialize() {\r\n    if (!localStorage.getItem(this.STORAGE_KEY)) {\r\n      localStorage.setItem(this.STORAGE_KEY, JSON.stringify([]));\r\n    }\r\n  }\r\n\r\n  async getImages() {\r\n    return JSON.parse(localStorage.getItem(this.STORAGE_KEY)) || [];\r\n  }\r\n\r\n  async getImageById(id) {\r\n    const meta = await this.getImages();\r\n    const entry = meta.find((img) => img.id === id);\r\n    const data = await getFromIndexedDB(id);\r\n    return { ...entry, ...data };\r\n  }\r\n\r\n  async saveImage(imageData) {\r\n    const id = Date.now().toString();\r\n\r\n    const {\r\n      image, drawing, audioComments, textComments = [],\r\n      ...metaData\r\n    } = imageData;\r\n\r\n    const newMeta = {\r\n      id,\r\n      createdAt: Date.now(),\r\n      textCommentsCount: textComments.length,\r\n      hasDrawing: !!drawing,\r\n      hasAudio: !!audioComments?.length,\r\n      ...metaData\r\n    };\r\n\r\n    const metaList = await this.getImages();\r\n    const updatedMeta = [newMeta, ...metaList].slice(0, this.MAX_IMAGES);\r\n    localStorage.setItem(this.STORAGE_KEY, JSON.stringify(updatedMeta));\r\n\r\n    await saveToIndexedDB({\r\n      id,\r\n      image,\r\n      drawing,\r\n      audioComments,\r\n      textComments\r\n    });\r\n\r\n    return { id, ...imageData };\r\n  }\r\n\r\n  async updateImage(id, updates) {\r\n    const metaList = await this.getImages();\r\n    const idx = metaList.findIndex(img => img.id === id);\r\n    if (idx === -1) return null;\r\n\r\n    const dbData = await getFromIndexedDB(id);\r\n    const updatedMeta = {\r\n      ...metaList[idx],\r\n      ...updates\r\n    };\r\n\r\n    const updatedMetaList = [...metaList];\r\n    updatedMetaList[idx] = updatedMeta;\r\n    localStorage.setItem(this.STORAGE_KEY, JSON.stringify(updatedMetaList));\r\n\r\n    await saveToIndexedDB({ ...dbData, ...updates, id });\r\n    return { id, ...dbData, ...updates };\r\n  }\r\n\r\n  async deleteImage(id) {\r\n    const metaList = await this.getImages();\r\n    const updatedMetaList = metaList.filter(img => img.id !== id);\r\n    localStorage.setItem(this.STORAGE_KEY, JSON.stringify(updatedMetaList));\r\n    await deleteFromIndexedDB(id);\r\n  }\r\n\r\n  async deleteTextComment(id, index) {\r\n    const data = await getFromIndexedDB(id);\r\n    if (!data?.textComments) return null;\r\n\r\n    data.textComments.splice(index, 1);\r\n    await saveToIndexedDB({ ...data, id });\r\n\r\n    return this.updateImage(id, {\r\n      textCommentsCount: data.textComments.length\r\n    });\r\n  }\r\n\r\n  async deleteAudioComment(id, index) {\r\n    const data = await getFromIndexedDB(id);\r\n    if (!data?.audioComments) return null;\r\n\r\n    data.audioComments.splice(index, 1);\r\n    await saveToIndexedDB({ ...data, id });\r\n\r\n    return this.updateImage(id, {\r\n      hasAudio: data.audioComments.length > 0\r\n    });\r\n  }\r\n\r\n  async deleteDrawing(id) {\r\n    const data = await getFromIndexedDB(id);\r\n    data.drawing = null;\r\n    await saveToIndexedDB({ ...data, id });\r\n\r\n    return this.updateImage(id, { hasDrawing: false });\r\n  }\r\n}\r\n\r\nexport const storage = new ImageStorage();\r\n\r\n// Helper functions\r\nexport const getImages = () => storage.getImages();\r\nexport const getImageById = (id) => storage.getImageById(id);\r\nexport const saveImage = (imageData) => storage.saveImage(imageData);\r\nexport const updateImage = (id, updates) => storage.updateImage(id, updates);\r\nexport const deleteImage = (id) => storage.deleteImage(id);\r\nexport const deleteTextComment = (id, idx) => storage.deleteTextComment(id, idx);\r\nexport const deleteAudioComment = (id, idx) => storage.deleteAudioComment(id, idx);\r\nexport const deleteDrawing = (id) => storage.deleteDrawing(id);"],"mappings":"AAAA,SACEA,eAAe,EACfC,gBAAgB,EAChBC,mBAAmB,QACd,aAAa;AAEpB,MAAMC,YAAY,CAAC;EACjBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,WAAW,GAAG,oBAAoB;IACvC,IAAI,CAACC,UAAU,GAAG,EAAE;IACpB,IAAI,CAACC,UAAU,CAAC,CAAC;EACnB;EAEAA,UAAUA,CAAA,EAAG;IACX,IAAI,CAACC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACJ,WAAW,CAAC,EAAE;MAC3CG,YAAY,CAACE,OAAO,CAAC,IAAI,CAACL,WAAW,EAAEM,IAAI,CAACC,SAAS,CAAC,EAAE,CAAC,CAAC;IAC5D;EACF;EAEA,MAAMC,SAASA,CAAA,EAAG;IAChB,OAAOF,IAAI,CAACG,KAAK,CAACN,YAAY,CAACC,OAAO,CAAC,IAAI,CAACJ,WAAW,CAAC,CAAC,IAAI,EAAE;EACjE;EAEA,MAAMU,YAAYA,CAACC,EAAE,EAAE;IACrB,MAAMC,IAAI,GAAG,MAAM,IAAI,CAACJ,SAAS,CAAC,CAAC;IACnC,MAAMK,KAAK,GAAGD,IAAI,CAACE,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACJ,EAAE,KAAKA,EAAE,CAAC;IAC/C,MAAMK,IAAI,GAAG,MAAMpB,gBAAgB,CAACe,EAAE,CAAC;IACvC,OAAO;MAAE,GAAGE,KAAK;MAAE,GAAGG;IAAK,CAAC;EAC9B;EAEA,MAAMC,SAASA,CAACC,SAAS,EAAE;IACzB,MAAMP,EAAE,GAAGQ,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;IAEhC,MAAM;MACJC,KAAK;MAAEC,OAAO;MAAEC,aAAa;MAAEC,YAAY,GAAG,EAAE;MAChD,GAAGC;IACL,CAAC,GAAGR,SAAS;IAEb,MAAMS,OAAO,GAAG;MACdhB,EAAE;MACFiB,SAAS,EAAET,IAAI,CAACC,GAAG,CAAC,CAAC;MACrBS,iBAAiB,EAAEJ,YAAY,CAACK,MAAM;MACtCC,UAAU,EAAE,CAAC,CAACR,OAAO;MACrBS,QAAQ,EAAE,CAAC,EAACR,aAAa,aAAbA,aAAa,eAAbA,aAAa,CAAEM,MAAM;MACjC,GAAGJ;IACL,CAAC;IAED,MAAMO,QAAQ,GAAG,MAAM,IAAI,CAACzB,SAAS,CAAC,CAAC;IACvC,MAAM0B,WAAW,GAAG,CAACP,OAAO,EAAE,GAAGM,QAAQ,CAAC,CAACE,KAAK,CAAC,CAAC,EAAE,IAAI,CAAClC,UAAU,CAAC;IACpEE,YAAY,CAACE,OAAO,CAAC,IAAI,CAACL,WAAW,EAAEM,IAAI,CAACC,SAAS,CAAC2B,WAAW,CAAC,CAAC;IAEnE,MAAMvC,eAAe,CAAC;MACpBgB,EAAE;MACFW,KAAK;MACLC,OAAO;MACPC,aAAa;MACbC;IACF,CAAC,CAAC;IAEF,OAAO;MAAEd,EAAE;MAAE,GAAGO;IAAU,CAAC;EAC7B;EAEA,MAAMkB,WAAWA,CAACzB,EAAE,EAAE0B,OAAO,EAAE;IAC7B,MAAMJ,QAAQ,GAAG,MAAM,IAAI,CAACzB,SAAS,CAAC,CAAC;IACvC,MAAM8B,GAAG,GAAGL,QAAQ,CAACM,SAAS,CAACxB,GAAG,IAAIA,GAAG,CAACJ,EAAE,KAAKA,EAAE,CAAC;IACpD,IAAI2B,GAAG,KAAK,CAAC,CAAC,EAAE,OAAO,IAAI;IAE3B,MAAME,MAAM,GAAG,MAAM5C,gBAAgB,CAACe,EAAE,CAAC;IACzC,MAAMuB,WAAW,GAAG;MAClB,GAAGD,QAAQ,CAACK,GAAG,CAAC;MAChB,GAAGD;IACL,CAAC;IAED,MAAMI,eAAe,GAAG,CAAC,GAAGR,QAAQ,CAAC;IACrCQ,eAAe,CAACH,GAAG,CAAC,GAAGJ,WAAW;IAClC/B,YAAY,CAACE,OAAO,CAAC,IAAI,CAACL,WAAW,EAAEM,IAAI,CAACC,SAAS,CAACkC,eAAe,CAAC,CAAC;IAEvE,MAAM9C,eAAe,CAAC;MAAE,GAAG6C,MAAM;MAAE,GAAGH,OAAO;MAAE1B;IAAG,CAAC,CAAC;IACpD,OAAO;MAAEA,EAAE;MAAE,GAAG6B,MAAM;MAAE,GAAGH;IAAQ,CAAC;EACtC;EAEA,MAAMK,WAAWA,CAAC/B,EAAE,EAAE;IACpB,MAAMsB,QAAQ,GAAG,MAAM,IAAI,CAACzB,SAAS,CAAC,CAAC;IACvC,MAAMiC,eAAe,GAAGR,QAAQ,CAACU,MAAM,CAAC5B,GAAG,IAAIA,GAAG,CAACJ,EAAE,KAAKA,EAAE,CAAC;IAC7DR,YAAY,CAACE,OAAO,CAAC,IAAI,CAACL,WAAW,EAAEM,IAAI,CAACC,SAAS,CAACkC,eAAe,CAAC,CAAC;IACvE,MAAM5C,mBAAmB,CAACc,EAAE,CAAC;EAC/B;EAEA,MAAMiC,iBAAiBA,CAACjC,EAAE,EAAEkC,KAAK,EAAE;IACjC,MAAM7B,IAAI,GAAG,MAAMpB,gBAAgB,CAACe,EAAE,CAAC;IACvC,IAAI,EAACK,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAES,YAAY,GAAE,OAAO,IAAI;IAEpCT,IAAI,CAACS,YAAY,CAACqB,MAAM,CAACD,KAAK,EAAE,CAAC,CAAC;IAClC,MAAMlD,eAAe,CAAC;MAAE,GAAGqB,IAAI;MAAEL;IAAG,CAAC,CAAC;IAEtC,OAAO,IAAI,CAACyB,WAAW,CAACzB,EAAE,EAAE;MAC1BkB,iBAAiB,EAAEb,IAAI,CAACS,YAAY,CAACK;IACvC,CAAC,CAAC;EACJ;EAEA,MAAMiB,kBAAkBA,CAACpC,EAAE,EAAEkC,KAAK,EAAE;IAClC,MAAM7B,IAAI,GAAG,MAAMpB,gBAAgB,CAACe,EAAE,CAAC;IACvC,IAAI,EAACK,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEQ,aAAa,GAAE,OAAO,IAAI;IAErCR,IAAI,CAACQ,aAAa,CAACsB,MAAM,CAACD,KAAK,EAAE,CAAC,CAAC;IACnC,MAAMlD,eAAe,CAAC;MAAE,GAAGqB,IAAI;MAAEL;IAAG,CAAC,CAAC;IAEtC,OAAO,IAAI,CAACyB,WAAW,CAACzB,EAAE,EAAE;MAC1BqB,QAAQ,EAAEhB,IAAI,CAACQ,aAAa,CAACM,MAAM,GAAG;IACxC,CAAC,CAAC;EACJ;EAEA,MAAMkB,aAAaA,CAACrC,EAAE,EAAE;IACtB,MAAMK,IAAI,GAAG,MAAMpB,gBAAgB,CAACe,EAAE,CAAC;IACvCK,IAAI,CAACO,OAAO,GAAG,IAAI;IACnB,MAAM5B,eAAe,CAAC;MAAE,GAAGqB,IAAI;MAAEL;IAAG,CAAC,CAAC;IAEtC,OAAO,IAAI,CAACyB,WAAW,CAACzB,EAAE,EAAE;MAAEoB,UAAU,EAAE;IAAM,CAAC,CAAC;EACpD;AACF;AAEA,OAAO,MAAMkB,OAAO,GAAG,IAAInD,YAAY,CAAC,CAAC;;AAEzC;AACA,OAAO,MAAMU,SAAS,GAAGA,CAAA,KAAMyC,OAAO,CAACzC,SAAS,CAAC,CAAC;AAClD,OAAO,MAAME,YAAY,GAAIC,EAAE,IAAKsC,OAAO,CAACvC,YAAY,CAACC,EAAE,CAAC;AAC5D,OAAO,MAAMM,SAAS,GAAIC,SAAS,IAAK+B,OAAO,CAAChC,SAAS,CAACC,SAAS,CAAC;AACpE,OAAO,MAAMkB,WAAW,GAAGA,CAACzB,EAAE,EAAE0B,OAAO,KAAKY,OAAO,CAACb,WAAW,CAACzB,EAAE,EAAE0B,OAAO,CAAC;AAC5E,OAAO,MAAMK,WAAW,GAAI/B,EAAE,IAAKsC,OAAO,CAACP,WAAW,CAAC/B,EAAE,CAAC;AAC1D,OAAO,MAAMiC,iBAAiB,GAAGA,CAACjC,EAAE,EAAE2B,GAAG,KAAKW,OAAO,CAACL,iBAAiB,CAACjC,EAAE,EAAE2B,GAAG,CAAC;AAChF,OAAO,MAAMS,kBAAkB,GAAGA,CAACpC,EAAE,EAAE2B,GAAG,KAAKW,OAAO,CAACF,kBAAkB,CAACpC,EAAE,EAAE2B,GAAG,CAAC;AAClF,OAAO,MAAMU,aAAa,GAAIrC,EAAE,IAAKsC,OAAO,CAACD,aAAa,CAACrC,EAAE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
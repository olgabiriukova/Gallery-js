{"ast":null,"code":"class ImageStorage {\n  constructor() {\n    this.STORAGE_KEY = 'image_gallery';\n    this.initialize();\n  }\n  initialize() {\n    if (!localStorage.getItem(this.STORAGE_KEY)) {\n      localStorage.setItem(this.STORAGE_KEY, JSON.stringify([]));\n    }\n  }\n  async getImages() {\n    return JSON.parse(localStorage.getItem(this.STORAGE_KEY));\n  }\n  async getImageById(id) {\n    const images = await this.getImages();\n    return images.find(img => img.id === id);\n  }\n  async saveImage(imageData) {\n    const images = await this.getImages();\n    const newImage = {\n      id: Date.now().toString(),\n      ...imageData\n    };\n    const updatedImages = [newImage, ...images];\n    localStorage.setItem(this.STORAGE_KEY, JSON.stringify(updatedImages));\n    return newImage;\n  }\n  async updateImage(id, updates) {\n    const images = await this.getImages();\n    const index = images.findIndex(img => img.id === id);\n    if (index === -1) return null;\n    const updatedImage = {\n      ...images[index],\n      ...updates\n    };\n    const updatedImages = [...images.slice(0, index), updatedImage, ...images.slice(index + 1)];\n    localStorage.setItem(this.STORAGE_KEY, JSON.stringify(updatedImages));\n    return updatedImage;\n  }\n}\nexport const storage = new ImageStorage();\n\n// Helper functions\nexport const getImages = () => storage.getImages();\nexport const getImageById = id => storage.getImageById(id);\nexport const saveImage = imageData => storage.saveImage(imageData);\nexport const updateImage = (id, updates) => storage.updateImage(id, updates);","map":{"version":3,"names":["ImageStorage","constructor","STORAGE_KEY","initialize","localStorage","getItem","setItem","JSON","stringify","getImages","parse","getImageById","id","images","find","img","saveImage","imageData","newImage","Date","now","toString","updatedImages","updateImage","updates","index","findIndex","updatedImage","slice","storage"],"sources":["C:/Users/lelia/gallery/src/services/storage.js"],"sourcesContent":["class ImageStorage {\r\n  constructor() {\r\n    this.STORAGE_KEY = 'image_gallery';\r\n    this.initialize();\r\n  }\r\n\r\n  initialize() {\r\n    if (!localStorage.getItem(this.STORAGE_KEY)) {\r\n      localStorage.setItem(this.STORAGE_KEY, JSON.stringify([]));\r\n    }\r\n  }\r\n\r\n  async getImages() {\r\n    return JSON.parse(localStorage.getItem(this.STORAGE_KEY));\r\n  }\r\n\r\n  async getImageById(id) {\r\n    const images = await this.getImages();\r\n    return images.find(img => img.id === id);\r\n  }\r\n\r\n  async saveImage(imageData) {\r\n    const images = await this.getImages();\r\n    const newImage = {\r\n      id: Date.now().toString(),\r\n      ...imageData\r\n    };\r\n    const updatedImages = [newImage, ...images];\r\n    localStorage.setItem(this.STORAGE_KEY, JSON.stringify(updatedImages));\r\n    return newImage;\r\n  }\r\n\r\n  async updateImage(id, updates) {\r\n    const images = await this.getImages();\r\n    const index = images.findIndex(img => img.id === id);\r\n    if (index === -1) return null;\r\n    \r\n    const updatedImage = {\r\n      ...images[index],\r\n      ...updates\r\n    };\r\n    \r\n    const updatedImages = [\r\n      ...images.slice(0, index),\r\n      updatedImage,\r\n      ...images.slice(index + 1)\r\n    ];\r\n    \r\n    localStorage.setItem(this.STORAGE_KEY, JSON.stringify(updatedImages));\r\n    return updatedImage;\r\n  }\r\n}\r\n\r\nexport const storage = new ImageStorage();\r\n\r\n// Helper functions\r\nexport const getImages = () => storage.getImages();\r\nexport const getImageById = (id) => storage.getImageById(id);\r\nexport const saveImage = (imageData) => storage.saveImage(imageData);\r\nexport const updateImage = (id, updates) => storage.updateImage(id, updates);"],"mappings":"AAAA,MAAMA,YAAY,CAAC;EACjBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,WAAW,GAAG,eAAe;IAClC,IAAI,CAACC,UAAU,CAAC,CAAC;EACnB;EAEAA,UAAUA,CAAA,EAAG;IACX,IAAI,CAACC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACH,WAAW,CAAC,EAAE;MAC3CE,YAAY,CAACE,OAAO,CAAC,IAAI,CAACJ,WAAW,EAAEK,IAAI,CAACC,SAAS,CAAC,EAAE,CAAC,CAAC;IAC5D;EACF;EAEA,MAAMC,SAASA,CAAA,EAAG;IAChB,OAAOF,IAAI,CAACG,KAAK,CAACN,YAAY,CAACC,OAAO,CAAC,IAAI,CAACH,WAAW,CAAC,CAAC;EAC3D;EAEA,MAAMS,YAAYA,CAACC,EAAE,EAAE;IACrB,MAAMC,MAAM,GAAG,MAAM,IAAI,CAACJ,SAAS,CAAC,CAAC;IACrC,OAAOI,MAAM,CAACC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACH,EAAE,KAAKA,EAAE,CAAC;EAC1C;EAEA,MAAMI,SAASA,CAACC,SAAS,EAAE;IACzB,MAAMJ,MAAM,GAAG,MAAM,IAAI,CAACJ,SAAS,CAAC,CAAC;IACrC,MAAMS,QAAQ,GAAG;MACfN,EAAE,EAAEO,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;MACzB,GAAGJ;IACL,CAAC;IACD,MAAMK,aAAa,GAAG,CAACJ,QAAQ,EAAE,GAAGL,MAAM,CAAC;IAC3CT,YAAY,CAACE,OAAO,CAAC,IAAI,CAACJ,WAAW,EAAEK,IAAI,CAACC,SAAS,CAACc,aAAa,CAAC,CAAC;IACrE,OAAOJ,QAAQ;EACjB;EAEA,MAAMK,WAAWA,CAACX,EAAE,EAAEY,OAAO,EAAE;IAC7B,MAAMX,MAAM,GAAG,MAAM,IAAI,CAACJ,SAAS,CAAC,CAAC;IACrC,MAAMgB,KAAK,GAAGZ,MAAM,CAACa,SAAS,CAACX,GAAG,IAAIA,GAAG,CAACH,EAAE,KAAKA,EAAE,CAAC;IACpD,IAAIa,KAAK,KAAK,CAAC,CAAC,EAAE,OAAO,IAAI;IAE7B,MAAME,YAAY,GAAG;MACnB,GAAGd,MAAM,CAACY,KAAK,CAAC;MAChB,GAAGD;IACL,CAAC;IAED,MAAMF,aAAa,GAAG,CACpB,GAAGT,MAAM,CAACe,KAAK,CAAC,CAAC,EAAEH,KAAK,CAAC,EACzBE,YAAY,EACZ,GAAGd,MAAM,CAACe,KAAK,CAACH,KAAK,GAAG,CAAC,CAAC,CAC3B;IAEDrB,YAAY,CAACE,OAAO,CAAC,IAAI,CAACJ,WAAW,EAAEK,IAAI,CAACC,SAAS,CAACc,aAAa,CAAC,CAAC;IACrE,OAAOK,YAAY;EACrB;AACF;AAEA,OAAO,MAAME,OAAO,GAAG,IAAI7B,YAAY,CAAC,CAAC;;AAEzC;AACA,OAAO,MAAMS,SAAS,GAAGA,CAAA,KAAMoB,OAAO,CAACpB,SAAS,CAAC,CAAC;AAClD,OAAO,MAAME,YAAY,GAAIC,EAAE,IAAKiB,OAAO,CAAClB,YAAY,CAACC,EAAE,CAAC;AAC5D,OAAO,MAAMI,SAAS,GAAIC,SAAS,IAAKY,OAAO,CAACb,SAAS,CAACC,SAAS,CAAC;AACpE,OAAO,MAAMM,WAAW,GAAGA,CAACX,EAAE,EAAEY,OAAO,KAAKK,OAAO,CAACN,WAAW,CAACX,EAAE,EAAEY,OAAO,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
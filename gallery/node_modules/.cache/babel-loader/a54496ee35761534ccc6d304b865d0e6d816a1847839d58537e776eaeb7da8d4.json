{"ast":null,"code":"const DB_NAME = 'ImageGalleryDB';\nconst DB_VERSION = 1;\nconst IMAGE_STORE = 'images';\nfunction openDB() {\n  return new Promise((resolve, reject) => {\n    const request = indexedDB.open(DB_NAME, DB_VERSION);\n    request.onupgradeneeded = e => {\n      const db = e.target.result;\n      if (!db.objectStoreNames.contains(IMAGE_STORE)) {\n        db.createObjectStore(IMAGE_STORE, {\n          keyPath: 'id'\n        });\n      }\n    };\n    request.onsuccess = () => resolve(request.result);\n    request.onerror = () => reject(request.error);\n  });\n}\nexport async function saveToIndexedDB(image) {\n  const db = await openDB();\n  return new Promise((resolve, reject) => {\n    const tx = db.transaction(IMAGE_STORE, 'readwrite');\n    tx.objectStore(IMAGE_STORE).put(image);\n    tx.oncomplete = () => resolve();\n    tx.onerror = () => reject(tx.error);\n  });\n}\nexport async function getFromIndexedDB(id) {\n  const db = await openDB();\n  return new Promise((resolve, reject) => {\n    const tx = db.transaction(IMAGE_STORE, 'readonly');\n    const req = tx.objectStore(IMAGE_STORE).get(id);\n    req.onsuccess = () => resolve(req.result);\n    req.onerror = () => reject(req.error);\n  });\n}\nexport async function deleteFromIndexedDB(id) {\n  const db = await openDB();\n  return new Promise((resolve, reject) => {\n    const tx = db.transaction(IMAGE_STORE, 'readwrite');\n    tx.objectStore(IMAGE_STORE).delete(id);\n    tx.oncomplete = () => resolve();\n    tx.onerror = () => reject(tx.error);\n  });\n}","map":{"version":3,"names":["DB_NAME","DB_VERSION","IMAGE_STORE","openDB","Promise","resolve","reject","request","indexedDB","open","onupgradeneeded","e","db","target","result","objectStoreNames","contains","createObjectStore","keyPath","onsuccess","onerror","error","saveToIndexedDB","image","tx","transaction","objectStore","put","oncomplete","getFromIndexedDB","id","req","get","deleteFromIndexedDB","delete"],"sources":["C:/Users/lelia/gallery/src/utils/db.js"],"sourcesContent":["\r\nconst DB_NAME = 'ImageGalleryDB';\r\nconst DB_VERSION = 1;\r\nconst IMAGE_STORE = 'images';\r\n\r\nfunction openDB() {\r\n  return new Promise((resolve, reject) => {\r\n    const request = indexedDB.open(DB_NAME, DB_VERSION);\r\n\r\n    request.onupgradeneeded = (e) => {\r\n      const db = e.target.result;\r\n      if (!db.objectStoreNames.contains(IMAGE_STORE)) {\r\n        db.createObjectStore(IMAGE_STORE, { keyPath: 'id' });\r\n      }\r\n    };\r\n\r\n    request.onsuccess = () => resolve(request.result);\r\n    request.onerror = () => reject(request.error);\r\n  });\r\n}\r\n\r\nexport async function saveToIndexedDB(image) {\r\n  const db = await openDB();\r\n  return new Promise((resolve, reject) => {\r\n    const tx = db.transaction(IMAGE_STORE, 'readwrite');\r\n    tx.objectStore(IMAGE_STORE).put(image);\r\n    tx.oncomplete = () => resolve();\r\n    tx.onerror = () => reject(tx.error);\r\n  });\r\n}\r\n\r\nexport async function getFromIndexedDB(id) {\r\n  const db = await openDB();\r\n  return new Promise((resolve, reject) => {\r\n    const tx = db.transaction(IMAGE_STORE, 'readonly');\r\n    const req = tx.objectStore(IMAGE_STORE).get(id);\r\n    req.onsuccess = () => resolve(req.result);\r\n    req.onerror = () => reject(req.error);\r\n  });\r\n}\r\n\r\nexport async function deleteFromIndexedDB(id) {\r\n  const db = await openDB();\r\n  return new Promise((resolve, reject) => {\r\n    const tx = db.transaction(IMAGE_STORE, 'readwrite');\r\n    tx.objectStore(IMAGE_STORE).delete(id);\r\n    tx.oncomplete = () => resolve();\r\n    tx.onerror = () => reject(tx.error);\r\n  });\r\n}\r\n"],"mappings":"AACA,MAAMA,OAAO,GAAG,gBAAgB;AAChC,MAAMC,UAAU,GAAG,CAAC;AACpB,MAAMC,WAAW,GAAG,QAAQ;AAE5B,SAASC,MAAMA,CAAA,EAAG;EAChB,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,MAAMC,OAAO,GAAGC,SAAS,CAACC,IAAI,CAACT,OAAO,EAAEC,UAAU,CAAC;IAEnDM,OAAO,CAACG,eAAe,GAAIC,CAAC,IAAK;MAC/B,MAAMC,EAAE,GAAGD,CAAC,CAACE,MAAM,CAACC,MAAM;MAC1B,IAAI,CAACF,EAAE,CAACG,gBAAgB,CAACC,QAAQ,CAACd,WAAW,CAAC,EAAE;QAC9CU,EAAE,CAACK,iBAAiB,CAACf,WAAW,EAAE;UAAEgB,OAAO,EAAE;QAAK,CAAC,CAAC;MACtD;IACF,CAAC;IAEDX,OAAO,CAACY,SAAS,GAAG,MAAMd,OAAO,CAACE,OAAO,CAACO,MAAM,CAAC;IACjDP,OAAO,CAACa,OAAO,GAAG,MAAMd,MAAM,CAACC,OAAO,CAACc,KAAK,CAAC;EAC/C,CAAC,CAAC;AACJ;AAEA,OAAO,eAAeC,eAAeA,CAACC,KAAK,EAAE;EAC3C,MAAMX,EAAE,GAAG,MAAMT,MAAM,CAAC,CAAC;EACzB,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,MAAMkB,EAAE,GAAGZ,EAAE,CAACa,WAAW,CAACvB,WAAW,EAAE,WAAW,CAAC;IACnDsB,EAAE,CAACE,WAAW,CAACxB,WAAW,CAAC,CAACyB,GAAG,CAACJ,KAAK,CAAC;IACtCC,EAAE,CAACI,UAAU,GAAG,MAAMvB,OAAO,CAAC,CAAC;IAC/BmB,EAAE,CAACJ,OAAO,GAAG,MAAMd,MAAM,CAACkB,EAAE,CAACH,KAAK,CAAC;EACrC,CAAC,CAAC;AACJ;AAEA,OAAO,eAAeQ,gBAAgBA,CAACC,EAAE,EAAE;EACzC,MAAMlB,EAAE,GAAG,MAAMT,MAAM,CAAC,CAAC;EACzB,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,MAAMkB,EAAE,GAAGZ,EAAE,CAACa,WAAW,CAACvB,WAAW,EAAE,UAAU,CAAC;IAClD,MAAM6B,GAAG,GAAGP,EAAE,CAACE,WAAW,CAACxB,WAAW,CAAC,CAAC8B,GAAG,CAACF,EAAE,CAAC;IAC/CC,GAAG,CAACZ,SAAS,GAAG,MAAMd,OAAO,CAAC0B,GAAG,CAACjB,MAAM,CAAC;IACzCiB,GAAG,CAACX,OAAO,GAAG,MAAMd,MAAM,CAACyB,GAAG,CAACV,KAAK,CAAC;EACvC,CAAC,CAAC;AACJ;AAEA,OAAO,eAAeY,mBAAmBA,CAACH,EAAE,EAAE;EAC5C,MAAMlB,EAAE,GAAG,MAAMT,MAAM,CAAC,CAAC;EACzB,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,MAAMkB,EAAE,GAAGZ,EAAE,CAACa,WAAW,CAACvB,WAAW,EAAE,WAAW,CAAC;IACnDsB,EAAE,CAACE,WAAW,CAACxB,WAAW,CAAC,CAACgC,MAAM,CAACJ,EAAE,CAAC;IACtCN,EAAE,CAACI,UAAU,GAAG,MAAMvB,OAAO,CAAC,CAAC;IAC/BmB,EAAE,CAACJ,OAAO,GAAG,MAAMd,MAAM,CAACkB,EAAE,CAACH,KAAK,CAAC;EACrC,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}